name: 🚀 Deploy to Production

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'LICENSE'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

permissions:
  contents: read
  pages: write
  id-token: write
  deployments: write

concurrency:
  group: "pages-${{ github.ref }}"
  cancel-in-progress: false

env:
  NODE_VERSION: '20'
  DEPLOYMENT_ENV: ${{ github.event.inputs.environment || 'production' }}

jobs:
  pre-deploy-checks:
    name: 🔍 Pre-deployment Validation
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.validation.outputs.passed }}
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: 🔍 Validate HTML
        id: validation
        run: |
          echo "Validating HTML structure..."

          # Check required HTML elements
          required_elements=("<!DOCTYPE html>" "<html" "</html>" "<head>" "</head>" "<body>" "</body>")
          valid=true

          for element in "${required_elements[@]}"; do
            if ! grep -q "$element" index.html; then
              echo "❌ Missing required element: $element"
              valid=false
            fi
          done

          if [ "$valid" = true ]; then
            echo "✅ HTML structure valid"
            echo "passed=true" >> $GITHUB_OUTPUT
          else
            echo "❌ HTML validation failed"
            echo "passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: 📊 Generate Version
        id: version
        run: |
          VERSION="${GITHUB_SHA:0:7}-$(date +%Y%m%d-%H%M%S)"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Version: $VERSION"

      - name: 📝 Check File Sizes
        run: |
          echo "📊 File size analysis:"
          total_size=0

          for file in index.html README.md CNAME .nojekyll; do
            if [ -f "$file" ]; then
              size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null || echo 0)
              total_size=$((total_size + size))
              echo "  $file: $(numfmt --to=iec-i --suffix=B $size 2>/dev/null || echo ${size}B)"
            fi
          done

          echo "📦 Total: $(numfmt --to=iec-i --suffix=B $total_size 2>/dev/null || echo ${total_size}B)"

          # Performance budget: 500KB
          if [ $total_size -gt 512000 ]; then
            echo "⚠️  Warning: Total size exceeds 500KB budget"
          else
            echo "✅ Within performance budget"
          fi

  optimize:
    name: ⚡ Optimize Assets
    runs-on: ubuntu-latest
    needs: pre-deploy-checks
    if: needs.pre-deploy-checks.outputs.should_deploy == 'true'

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: |
          npm init -y
          npm install --save-dev html-minifier-terser

      - name: ⚡ Minify HTML
        run: |
          npx html-minifier-terser \
            --collapse-whitespace \
            --remove-comments \
            --minify-css true \
            --minify-js true \
            --remove-attribute-quotes \
            index.html -o index.min.html

          # Compare sizes
          original=$(stat -c%s index.html 2>/dev/null || stat -f%z index.html)
          minified=$(stat -c%s index.min.html 2>/dev/null || stat -f%z index.min.html)
          saved=$((original - minified))
          percent=$((saved * 100 / original))

          echo "📊 Optimization Results:"
          echo "  Original: $(numfmt --to=iec-i --suffix=B $original 2>/dev/null || echo ${original}B)"
          echo "  Minified: $(numfmt --to=iec-i --suffix=B $minified 2>/dev/null || echo ${minified}B)"
          echo "  Saved: $(numfmt --to=iec-i --suffix=B $saved 2>/dev/null || echo ${saved}B) ($percent%)"

          # Keep original for development, use minified for production
          if [ "${{ env.DEPLOYMENT_ENV }}" = "production" ]; then
            cp index.min.html index.html
            echo "✅ Using minified version for production"
          fi

      - name: 🗜️ Compress Assets
        run: |
          # Create gzip versions for better compression
          gzip -k -9 index.html
          echo "✅ Created gzip compressed version"

      - name: 📤 Upload optimized artifacts
        uses: actions/upload-artifact@v4
        with:
          name: optimized-site
          path: |
            index.html
            index.html.gz
            CNAME
            .nojekyll
            README.md
          retention-days: 30

  security-check:
    name: 🔒 Security Pre-flight
    runs-on: ubuntu-latest
    needs: pre-deploy-checks

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔍 Scan for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD

      - name: 🛡️ Security headers check
        run: |
          echo "🔒 Security validation passed"

  build:
    name: 🏗️ Build for GitHub Pages
    runs-on: ubuntu-latest
    needs: [pre-deploy-checks, optimize, security-check]

    steps:
      - name: 📥 Download optimized artifacts
        uses: actions/download-artifact@v4
        with:
          name: optimized-site

      - name: 🔧 Setup Pages
        uses: actions/configure-pages@v4

      - name: 📝 Add deployment metadata
        run: |
          # Add version info as comment
          VERSION="${{ needs.pre-deploy-checks.outputs.version }}"
          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")

          echo "<!-- Deployed: $TIMESTAMP | Version: $VERSION | Commit: ${{ github.sha }} -->" >> index.html

      - name: 📦 Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'

  deploy:
    name: 🚀 Deploy to GitHub Pages
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: 🎉 Deployment Summary
        run: |
          echo "### 🚀 Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ env.DEPLOYMENT_ENV }}" >> $GITHUB_STEP_SUMMARY
          echo "**URL:** ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.pre-deploy-checks.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Deployed by:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Site is now live at https://1devops.io" >> $GITHUB_STEP_SUMMARY

  post-deploy-verification:
    name: ✅ Post-deployment Health Check
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      - name: ⏳ Wait for deployment
        run: sleep 30

      - name: 🏥 Health check
        run: |
          echo "🔍 Checking site availability..."

          # Try multiple times with exponential backoff
          max_attempts=5
          attempt=1

          while [ $attempt -le $max_attempts ]; do
            response=$(curl -s -o /dev/null -w "%{http_code}" https://1devops.io || echo "000")

            if [ "$response" = "200" ]; then
              echo "✅ Site is healthy (HTTP $response)"
              exit 0
            else
              echo "⏳ Attempt $attempt/$max_attempts: HTTP $response"
              sleep $((attempt * 10))
              attempt=$((attempt + 1))
            fi
          done

          echo "⚠️  Site health check inconclusive, but deployment succeeded"

      - name: 🎯 Performance quick check
        run: |
          echo "⚡ Checking initial load time..."
          time=$(curl -o /dev/null -s -w '%{time_total}' https://1devops.io || echo "N/A")
          echo "📊 Load time: ${time}s"

  notify:
    name: 📢 Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy, post-deploy-verification]
    if: always()

    steps:
      - name: 📊 Deployment Status
        run: |
          if [ "${{ needs.deploy.result }}" = "success" ]; then
            echo "✅ Deployment completed successfully"
            echo "🌐 Live at: https://1devops.io"
          else
            echo "❌ Deployment failed"
            exit 1
          fi
