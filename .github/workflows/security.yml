name: 🔒 Advanced Security Scanning

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

concurrency:
  group: security-${{ github.ref }}
  cancel-in-progress: false

jobs:
  codeql:
    name: 🔍 CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 360
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ['javascript']

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔍 Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: 🏗️ Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  semgrep:
    name: 🔍 Semgrep SAST
    runs-on: ubuntu-latest
    container:
      image: semgrep/semgrep

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔍 Run Semgrep
        run: |
          semgrep scan --config auto \
            --config p/owasp-top-ten \
            --config p/security-audit \
            --config p/secrets \
            --json --output semgrep-results.json || true

      - name: 📤 Upload Semgrep results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: semgrep-results
          path: semgrep-results.json

  trivy:
    name: 🔍 Trivy Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: 📤 Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  dependency-review:
    name: 🔍 Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔍 Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate
          deny-licenses: GPL-3.0, AGPL-3.0
          comment-summary-in-pr: always

  secrets-scan:
    name: 🔐 Secret Scanning
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Gitleaks scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: 🔍 TruffleHog scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  supply-chain:
    name: 🔗 Supply Chain Security
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔗 SLSA Provenance
        run: |
          echo "🔗 Supply Chain Security Check"
          echo "  Repository: ${{ github.repository }}"
          echo "  Ref: ${{ github.ref }}"
          echo "  SHA: ${{ github.sha }}"
          echo "  Actor: ${{ github.actor }}"

      - name: 📝 Generate SBOM
        run: |
          echo "📝 Generating Software Bill of Materials..."

          cat > sbom.json <<EOF
          {
            "bomFormat": "CycloneDX",
            "specVersion": "1.4",
            "version": 1,
            "metadata": {
              "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
              "component": {
                "type": "application",
                "name": "1devops.io",
                "version": "${{ github.sha }}"
              }
            },
            "components": []
          }
          EOF

          echo "✅ SBOM generated"

      - name: 📤 Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.json

  owasp-zap:
    name: 🕷️ OWASP ZAP Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🕷️ ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.12.0
        with:
          target: 'https://1devops.io'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
          allow_issue_writing: false

  security-scorecard:
    name: 📊 OpenSSF Scorecard
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      id-token: write
      contents: read
      actions: read

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: 📊 Run Scorecard
        uses: ossf/scorecard-action@v2.3.1
        with:
          results_file: results.sarif
          results_format: sarif
          publish_results: true

      - name: 📤 Upload Scorecard results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

  security-headers:
    name: 🛡️ Security Headers Check
    runs-on: ubuntu-latest

    steps:
      - name: 🛡️ Check security headers
        run: |
          echo "🛡️  Analyzing security headers for https://1devops.io..."

          headers=(
            "X-Frame-Options"
            "X-Content-Type-Options"
            "Strict-Transport-Security"
            "Content-Security-Policy"
            "Referrer-Policy"
            "Permissions-Policy"
          )

          echo "📋 Recommended Security Headers:"
          for header in "${headers[@]}"; do
            echo "  - $header"
          done

          echo ""
          echo "💡 GitHub Pages automatically sets some security headers."
          echo "💡 For additional headers, consider using Cloudflare or custom domain setup."

  vulnerability-summary:
    name: 📊 Security Summary
    runs-on: ubuntu-latest
    needs: [codeql, semgrep, trivy, secrets-scan, supply-chain, security-scorecard]
    if: always()

    steps:
      - name: 📊 Generate Security Summary
        run: |
          echo "### 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Security Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|----------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| CodeQL | ${{ needs.codeql.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Semgrep SAST | ${{ needs.semgrep.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Trivy | ${{ needs.trivy.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Secret Scanning | ${{ needs.secrets-scan.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Supply Chain | ${{ needs.supply-chain.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| OpenSSF Scorecard | ${{ needs.security-scorecard.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 View detailed results in the Security tab" >> $GITHUB_STEP_SUMMARY
